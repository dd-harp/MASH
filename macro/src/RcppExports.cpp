// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// flux_movement_init
List flux_movement_init(List parameters, List initial_location);
RcppExport SEXP _macro_flux_movement_init(SEXP parametersSEXP, SEXP initial_locationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< List >::type initial_location(initial_locationSEXP);
    rcpp_result_gen = Rcpp::wrap(flux_movement_init(parameters, initial_location));
    return rcpp_result_gen;
END_RCPP
}
// flux_movement_step
List flux_movement_step(List module, NumericVector time_step);
RcppExport SEXP _macro_flux_movement_step(SEXP moduleSEXP, SEXP time_stepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type module(moduleSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type time_step(time_stepSEXP);
    rcpp_result_gen = Rcpp::wrap(flux_movement_step(module, time_step));
    return rcpp_result_gen;
END_RCPP
}
// convert_to_r_movement
List convert_to_r_movement(List movement, IntegerVector human);
RcppExport SEXP _macro_convert_to_r_movement(SEXP movementSEXP, SEXP humanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type movement(movementSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type human(humanSEXP);
    rcpp_result_gen = Rcpp::wrap(convert_to_r_movement(movement, human));
    return rcpp_result_gen;
END_RCPP
}
// movements_of_human
NumericVector movements_of_human(List movement_list, IntegerVector human);
RcppExport SEXP _macro_movements_of_human(SEXP movement_listSEXP, SEXP humanSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type movement_list(movement_listSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type human(humanSEXP);
    rcpp_result_gen = Rcpp::wrap(movements_of_human(movement_list, human));
    return rcpp_result_gen;
END_RCPP
}
// skip_mersenne_twister
IntegerMatrix skip_mersenne_twister(int seed, int skip_size_power_two, int skip_count);
RcppExport SEXP _macro_skip_mersenne_twister(SEXP seedSEXP, SEXP skip_size_power_twoSEXP, SEXP skip_countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type skip_size_power_two(skip_size_power_twoSEXP);
    Rcpp::traits::input_parameter< int >::type skip_count(skip_countSEXP);
    rcpp_result_gen = Rcpp::wrap(skip_mersenne_twister(seed, skip_size_power_two, skip_count));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_macro_flux_movement_init", (DL_FUNC) &_macro_flux_movement_init, 2},
    {"_macro_flux_movement_step", (DL_FUNC) &_macro_flux_movement_step, 2},
    {"_macro_convert_to_r_movement", (DL_FUNC) &_macro_convert_to_r_movement, 2},
    {"_macro_movements_of_human", (DL_FUNC) &_macro_movements_of_human, 2},
    {"_macro_skip_mersenne_twister", (DL_FUNC) &_macro_skip_mersenne_twister, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_macro(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
